<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.meilituibian.api.mapper.OrderMapper">
    <sql id="fields">
        id,open_id as openId,project_id as projectId,project_name as projectName,user_name as userName,phone,subscribe_date as subscribeDate, parent_open_id as parentOpenId,create_date as createDate,status,order_no as orderNo
    </sql>
    <insert id="insertOrder" parameterType="cn.meilituibian.api.domain.Order" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
         insert into `Order`(open_id,project_id,project_name,user_name,phone,email,subscribe_date,parent_open_id,create_date, order_no)
         values(#{openId}, #{projectId}, #{projectName}, #{userName}, #{phone}, #{email}, #{subscribeDate}, #{parentOpenId}, #{createDate}, #{orderNo})
    </insert>

    <select id="getOrdersByOpenId" resultType="Order">
        select <include refid="fields"/>
        from `Order` where open_id=#{openId} and status != -1 order by subscribe_date desc
    </select>

    <select id="getOrderByIdAndOpenId"  resultType="Order">
        select <include refid="fields"/>
        from `Order` where id = #{id} and open_id= #{openId}
    </select>

    <select id="getOrderById"  resultType="Order">
        select <include refid="fields"/>
        from `Order` where id = #{id}
    </select>

    <update id="updateOrder" parameterType="Order">
       UPDATE `Order`
        <set>
        <if test="projectId != null">project_id=#{projectId},</if>
        <if test="projectName != null">project_name=#{projectName},</if>
        <if test="userName != null">user_name=#{userName},</if>
        <if test="phone != null">phone=#{phone},</if>
        <if test="email != null">email=#{email},</if>
        <if test="address != null">address=#{address},</if>
        <if test="postCode != null">post_code=#{postCode},</if>
        <if test="updateDate != null">update_date=#{updateDate},</if>
        <if test="subscribeDate != null">subscribe_date=#{subscribeDate},</if>
        </set>
        where open_id = #{openId} and id=#{id}
    </update>

    <select id="getClientOrderByUser" resultType="Order">
        select <include refid="fields"/> from `Order` where parent_open_id = #{openId}
    </select>

    <sql id="short_field">
        id,open_id as openId,user_name as userName,project_id as projectId,project_name as projectName,phone,subscribe_date as subscribeDate,parent_open_id as parentOpenId,status,order_no as orderNo
    </sql>
    <select id="getPerformancesByOpenId" resultType="Order">
        SELECT <include refid="short_field"/>  FROM `order` a WHERE a.parent_open_id=#{openId}
        UNION ALL SELECT <include refid="short_field"/> FROM `order` b WHERE EXISTS (SELECT 1 FROM `order` a WHERE a.parent_open_id=#{openId} AND a.`open_id` = b.parent_open_id )

    </select>

    <select id="getOrders" resultType="Order">
        select <include refid="short_field"/> from `order`
        <where>
            <if test="openId != null">
                open_id = #{openId}
            </if>
            <if test="status != null">
                and status = #{status}
            </if>

        </where>
    </select>

    <select id="findOrderByOpenIdAndProjectId" resultType="Order">
         select <include refid="short_field"/>  from `order` where open_id=#{openId} and project_Id=#{projectId} and status=0
    </select>

</mapper>